public class Solution {
    public List<Integer> getRow(int rowIndex) {
        ArrayList<Integer> s = new ArrayList<Integer>();
        //首先给出两个特殊情况的解
        if(rowIndex == 0){
            s.add(1);
            return s;
        }
        
        if(rowIndex == 1){
            s.add(1);
            s.add(1);
            return s;
        }
        /*分析题目，可知这是杨辉三角形的问题
        1
        1 1
        1 2 1
        1 3 3 1
        1 4 6 4 1
        因为用一维数组来解，同时ArrayList存储的是不限定个数的对象
        所以可以多次迭代
        若用矩阵表示f（i）（j）=f（i-1）（j-1）+f（i-1）（j）
        这个多次迭代需要两个循环实现
        每次重新生成数列时，先从最后一个数字开始，然后根据之前得到的前一行生成新数列
        */
        if(rowIndex >= 2){
            s.add(1);
            s.add(1);
        }
        for(int i = 2 ; i <= rowIndex ; i++){
            //for(int j = i ; j > 1 ; j-- ){
            for(int j = i ; j >= 1 ; j-- ){
                //if(j = i){
                if(j == i){
                    s.add(1);
                }
                else{
                    int temp = s.get(j) + s.get(j-1);
                    s.set(j , temp);
                }
            }
        }
        return s;
    }
}